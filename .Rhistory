log(lambda[s,t,y]) <- b0.species[s] +
eps.site[Site.ID[t], s] +
eps.year[Year.ID[y], s]
}
}
}
lambda[s,t,y] <- b0.species[s] +
eps.site[Site.ID[t], s] +
eps.year[Year.ID[y], s]
View(lambda)
p <- array(data = NA, dim = c(n.species, n.transects,
n.years, 2))
for(s in seq_along(n.species)){
for(t in seq_along(n.transects)){
for(y in seq_along(n.years)){
lambda[s,t,y] <- b0.species[s] +
eps.site[Site.ID[t], s] +
eps.year[Year.ID[y], s]
}
}
}
for(s in seq_along(n.species)){
for(t in seq_along(n.transects)){
for(y in seq_along(n.years)){
lambda[s,t,y] <- b0.species[s]# +
#eps.site[Site.ID[t], s] +
#eps.year[Year.ID[y], s]
}
}
}
b0.species
lambda[1,,]
lambda[2,,]
lanbda3,,
lambda93,,
lambda[3,,]
for(s in seq_along(n.species)){
for(t in seq_along(n.transects)){
for(y in seq_along(n.years)){
lambda[s,t,y] <- #b0.species[s] +
eps.site[Site.ID[t], s]# +
# eps.year[Year.ID[y], s]
}
}
}
eps.site
?expand.grid
# Create DF for all data --------------------------------------------------
species <- 1:n.species
transects <- 1:n.transects
years <- 1:nyears
years <- 1:n.years
reps <- 1:2
df <- expand.grid(species, transects, years, reps)
View(df)
df <- expand.grid(species = species, transects, years, reps)
df <- expand.grid(species = species,
transect = transects,
year = years,
rep = reps)
df <- df %>%
group_by(transect, year, rep) %>%
mutate(survey.covariate = rnorm(1, 0, 1))
package.list <- c("tidyverse")
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## And loading them
for(i in package.list){library(i, character.only = T)}
df <- df %>%
group_by(transect, year, rep) %>%
mutate(survey.covariate = rnorm(1, 0, 1))
#get a survey covariate value for each of these transects, years, reps
df <- df %>%
group_by(transect, year, rep) %>%
mutate(survey.covariate = rnorm(1, 0, 1)) %>%
ungroup()
#get a species intercept for each species for detection model
#and abundance model
df <- df %>%
group_by(species) %>%
mutate(a0 = rnorm(1, 0, 1),
b0.species = rnorm(1, 0, 1))
#get a species intercept for each species for detection model
#and abundance model
df <- df %>%
group_by(species) %>%
mutate(a0 = rnorm(1, 0, 1),
b0.species = rnorm(1, 0, 1)) %>%
ungroup()
#get a random effect of site and year within each species
df <- df %>%
mutate(site = case_when(transect %in% c(1:3) ~ 1,
transect %in% c(4:6) ~ 2,
transect %in% c(7:9) ~ 3,
TRUE ~ NA_real_))
#get a random effect of site and year within each species
df <- df %>%
mutate(site = case_when(transect %in% c(1:3) ~ 1,
transect %in% c(4:6) ~ 2,
transect %in% c(7:9) ~ 3,
TRUE ~ NA_real_)) %>%
group_by(species, site) %>%
mutate(eps.site = rnorm(1, 0,1)) %>%
ungroup() %>%
group_by(species, year) %>%
mutate(eps.year = rnorm(1, 0,1)) %>%
ungroup()
df <- df %>%
rowwise() %>%
mutate(logit.p = a0 + a1*survey.covariate,
p = plogis(logit.p))
?dpois
?rbin
??rbinom
?rbinom
df <- df %>%
rowwise() %>%
mutate(logit.p = a0 + a1*survey.covariate,
p = plogis(logit.p),
log.lambda = b0.species + eps.site + eps.year,
lambda = exp(log.lambda),
N = rpois(1, lambda),
y = rbinom(1, N, p))
spec <- df$species
trans <- df$transect
yr <- df$year
rp <- df$rep
#make a blank array with dims of species x years
y <- array(NA, dim = c(n.species, n.tranects, n.years, 2))
#make a blank array with dims of species x years
y <- array(NA, dim = c(n.species, n.transects, n.years, 2))
#fill taht array based on the values in those columns
# for occupancy
for(i in 1:dim(df)[1]){ #dim[1] = n.rows
#using info from the dataframe on the species of row i,
#the transect of row i,
# the year of row i and the replicate of row i,
# populate that space in the array with the column in
# the dataframe that corresponds to the observed number
# for that speciesxtransectxyearxreplicate combo
y[spec[i], trans[i], yr[i], rp[i]] <- as.numeric(df[i,16])
}
survey.covariate <- array(dim = c(n.transects, n.years, 2))
for(i in 1:dim(df)[1]){ #dim[1] = n.rows
#using info from the dataframe on the transect of row i,
# the year of row i and the replicate of row i,
# populate that space in the array with the column in
# the dataframe that corresponds to the covariate value
# for that transectxyearxreplicate combo
survey.covariate[trans[i], yr[i], rp[i]] <- as.numeric(df[i,5])
}
data_list <- list(Site.ID = Site.ID,
Year.ID = Year.ID,
survey.covariate = survey.covariate,
y = y,
n.species = n.species,
n.transects = n.transects,
n.sites = n.sites,
n.years = n.years,
n.start = n.start,
n.end = n.end,
n.rep = n.rep)
package.list <- c("tidyverse", 'here')
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## And loading them
for(i in package.list){library(i, character.only = T)}
saveRDS(here('data',
'MSAM_data_list.RDS'))
saveRDS(data_list, here('data',
'MSAM_data_list.RDS'))
1/0.001
?echo
??echo
here()
data_list <- readRDS(here('data',
'MSAM_data_list.RDS'))
str(data_list)
package.list <- c("tidyverse", 'here',
'jagsUI', 'coda',
'mcmcplots')
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## And loading them
for(i in package.list){library(i, character.only = T)}
data_list <- readRDS(here('data',
'MSAM_data_list.RDS'))
str(data_list)
model_file <- here('code',
'MSAM_model.R')
parameters <- c('b0.star',
'a0',
'a1',
'eps.site.star',
'eps.year.star',
'mu.a0',
'sig.a0',
'mu.b0species',
'sig.b0species',
'sig.eps.site',
'sig.eps.year')
model <- jagsUI::jags(data = data_list,
parameters.to.save =,
model.file = model_file,
parallel = TRUE,
n.chains = 3,
n.iter = 4000,
DIC = TRUE)
model <- jagsUI::jags(data = data_list,
parameters.to.save = parameters,
model.file = model_file,
parallel = TRUE,
n.chains = 3,
n.iter = 4000,
DIC = TRUE)
model <- jagsUI::jags(data = data_list,
parameters.to.save = parameters,
model.file = model_file,
parallel = TRUE,
n.chains = 3,
n.iter = 4000,
DIC = TRUE)
#Simulating abundance commmunities to model
# Ana Miller-ter Kuile
# June 12, 2024
#this script simulates some abundance communities that will
#run faster than real communities for the MSAM model
# Load packages -----------------------------------------------------------
package.list <- c("tidyverse", 'here')
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## And loading them
for(i in package.list){library(i, character.only = T)}
# Attributes of the dataset -----------------------------------------------
#This model is structured with a few aspects of the data:
#1. Data are collected on species counts for multiple species
## in survey units (e.g., transects) that are clustered in larger
## sampling schemes (e.g., sites) across a series of years,
## with 1+ replicate surveys for each site in each year (at
## least a subset need to have 2+ surveys for this model structure)
#2. For this dataset, detection probabilities are dependent on a
## survey covariate, such that in each site, year, replicate combo,
## a species detectability is dependent on some aspect of the environment
## at that time (e.g, weather, canopy cover, etc.) We have provided a
## commented-out addition to the code that would enable addition of
## a species covariate that would impact detectability, but don't include
## it here for ease of application
#3. As coded, not all transects have to have the same sampling years,
## such that you could incorporate a common pattern at long-term monitoring
## sites where some sites are surveyed for different periods of time. This
## model structure does assume you have yearly sampling of your communities.
## For a model where this isn't the case, please refer to the code for
## the PFNP plant dataset in our main paper (LINK)
# Data needed for model ---------------------------------------------------
#here is a list of data objects we will need to run this model:
#Site.ID[t] - vector of larger site ids of length of number of transects
#Year.ID[y] - vector of year ids of length of number of years
#survey.covariate[t,y,r] - array of dimensions transect, year, replicate within year
#count[s,t,y,r] (response data) - array of dimensions species, transect, year, replicate
#n.species - number of species
#n.transects - number of transects
#n.sites - number of larger sites in survey design
#n.years - number of total years in the datset
#n.start[t] - vector of end years length number of transects
#n.end[t] - vector of end years of length number of transects
#n.rep[t,y] - matrix of dimensions transects by years with number of surveys in that combo
# Specifics of our dataset ------------------------------------------------
#n.sites- 3
#n.transects - 9 (3 in each site)
#n.years - 5
#n.species - 10
#n.rep - always 2 in each transect/year combo
# Generate data list ------------------------------------------------------
#numbers for indexing
n.sites <- 3
n.transects <- 9
n.years <- 5
n.species <- 10
n.rep <- matrix(data = 2, nrow = n.transects, ncol = n.years)
n.start <- rep(1, n.transects)
n.end <- rep(5, n.transects)
#random effect ID vectors
Site.ID <- c(rep(1, 3), rep(2, 3), rep(3, 3))
Year.ID <- 1:5
# Create DF for all data --------------------------------------------------
species <- 1:n.species
transects <- 1:n.transects
years <- 1:n.years
reps <- 1:2
df <- expand.grid(species = species,
transect = transects,
year = years,
rep = reps)
#get a survey covariate value for each of these transects, years, reps
df <- df %>%
group_by(transect, year, rep) %>%
mutate(survey.covariate = rnorm(1, 0, 1)) %>%
ungroup()
#get a species intercept for each species for detection model
#and abundance model
df <- df %>%
group_by(species) %>%
mutate(a0 = rnorm(1, 0, 1),
b0.species = rnorm(1, 0, 1)) %>%
ungroup()
#get a random effect of site and year within each species
df <- df %>%
mutate(site = case_when(transect %in% c(1:3) ~ 1,
transect %in% c(4:6) ~ 2,
transect %in% c(7:9) ~ 3,
TRUE ~ NA_real_)) %>%
group_by(species, site) %>%
mutate(eps.site = rnorm(1, 0,1)) %>%
ungroup() %>%
group_by(species, year) %>%
mutate(eps.year = rnorm(1, 0,1)) %>%
ungroup()
# Get p, N, and y in df ---------------------------------------------------
#y is dependent on p and N
#p is based on a regression:
#logit(p[s,t,y,r]) <- a0[s] + a1*survey.covariate[t,y,r]
#N is dependent on a lambda:
# N[s,t,y] ~ dpois(lambda[s,t,y])
#which is dependent on a regression:
#log(lambda[s,t,y]) <- b0.species[s] +
#  eps.site[Site.ID[t], s] +
#  eps.year[Year.ID[y], s]
#y[s,t,y,r] (response data) - array of dimensions species, site, year, replicate
#y[s,t,y,r] ~ dbin(p[s,t,y,r], N[s,t,y])
a1 <- 0.2 #set to a value
df <- df %>%
rowwise() %>%
mutate(logit.p = a0 + a1*survey.covariate,
p = plogis(logit.p),
log.lambda = b0.species + eps.site + eps.year,
lambda = exp(log.lambda),
N = rpois(1, lambda),
count = rbinom(1, N, p))
# Pull out covariae and response data --------------------------------------------------
#y[s,t,y,r] (response data) - array of dimensions species, transect, year, replicate
#survey.covariate[t,y,r] - array of dimensions transect, year, replicate within year
spec <- df$species
trans <- df$transect
yr <- df$year
rp <- df$rep
#make a blank array with dims of species x years
count <- array(NA, dim = c(n.species, n.transects, n.years, 2))
#fill taht array based on the values in those columns
for(i in 1:dim(df)[1]){ #dim[1] = n.rows
#using info from the dataframe on the species of row i,
#the transect of row i,
# the year of row i and the replicate of row i,
# populate that space in the array with the column in
# the dataframe that corresponds to the observed number
# for that speciesxtransectxyearxreplicate combo
count[spec[i], trans[i], yr[i], rp[i]] <- as.numeric(df[i,16])
}
survey.covariate <- array(dim = c(n.transects, n.years, 2))
for(i in 1:dim(df)[1]){ #dim[1] = n.rows
#using info from the dataframe on the transect of row i,
# the year of row i and the replicate of row i,
# populate that space in the array with the column in
# the dataframe that corresponds to the covariate value
# for that transectxyearxreplicate combo
survey.covariate[trans[i], yr[i], rp[i]] <- as.numeric(df[i,5])
}
# Create data list --------------------------------------------------------
data_list <- list(Site.ID = Site.ID,
Year.ID = Year.ID,
survey.covariate = survey.covariate,
count = count,
n.species = n.species,
n.transects = n.transects,
n.sites = n.sites,
n.years = n.years,
n.start = n.start,
n.end = n.end,
n.rep = n.rep)
saveRDS(data_list, here('data',
'MSAM_data_list.RDS'))
data_list <- readRDS(here('data',
'MSAM_data_list.RDS'))
model_file <- here('code',
'MSAM_model.R')
parameters <- c('b0.star',
'a0',
'a1',
'eps.site.star',
'eps.year.star',
'mu.a0',
'sig.a0',
'mu.b0species',
'sig.b0species',
'sig.eps.site',
'sig.eps.year')
model <- jagsUI::jags(data = data_list,
parameters.to.save = parameters,
model.file = model_file,
parallel = TRUE,
n.chains = 3,
n.iter = 4000,
DIC = TRUE)
count[3,1,1,1]
#Set initial values for the number of individuals
#and various variables with known values to get convergence faster
inits <- list(list(a1 = inits_list$a1,
mu.a0 = inits_list$mu.a0,
mu.b0species = inits_list$mu.b0species,
a0 = inits_list$a0,
b0.species = inits_list$b0.species,
eps.site = inits_list$eps.site,
eps.year = inits_list$eps.year,
N = inits_list$countmax),
list(a1 = inits_list$a1 + 0.05,
mu.a0 = inits_list$mu.a0 + 0.05,
mu.b0species = inits_list$mu.b0species + 0.05,
a0 = inits_list$a0 + 0.05,
b0.species = inits_list$b0.species + 0.05,
eps.site = inits_list$eps.site + 0.05,
eps.year = inits_list$eps.year + 0.05,
N = inits_list$countmax),
list(a1 = inits_list$a1 - 0.05,
mu.a0 = inits_list$mu.a0 - 0.05,
mu.b0species = inits_list$mu.b0species - 0.05,
a0 = inits_list$a0 - 0.05,
b0.species = inits_list$b0.species - 0.05,
eps.site = inits_list$eps.site - 0.05,
eps.year = inits_list$eps.year - 0.05,
N = inits_list$countmax))
package.list <- c("tidyverse", 'here',
'jagsUI', 'coda',
'mcmcplots')
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in% installed.packages()[,"Package"])]
## And loading them
for(i in package.list){library(i, character.only = T)}
data_list <- readRDS(here('data',
'MSAM_data_list.RDS'))
#The model file is here:
model_file <- here('code',
'MSAM_model.R')
#These are the parameters we will want to track
#to assess convergence
parameters <- c('b0.star',
'a0',
'a1',
'eps.site.star',
'eps.year.star',
'mu.a0',
'sig.a0',
'mu.b0species',
'sig.b0species',
'sig.eps.site',
'sig.eps.year')
inits_list <- readRDS(here('data',
'MSAM_inits_list.RDS'))
#Set initial values for the number of individuals
#and various variables with known values to get convergence faster
inits <- list(list(a1 = inits_list$a1,
mu.a0 = inits_list$mu.a0,
mu.b0species = inits_list$mu.b0species,
a0 = inits_list$a0,
b0.species = inits_list$b0.species,
eps.site = inits_list$eps.site,
eps.year = inits_list$eps.year,
N = inits_list$countmax),
list(a1 = inits_list$a1 + 0.05,
mu.a0 = inits_list$mu.a0 + 0.05,
mu.b0species = inits_list$mu.b0species + 0.05,
a0 = inits_list$a0 + 0.05,
b0.species = inits_list$b0.species + 0.05,
eps.site = inits_list$eps.site + 0.05,
eps.year = inits_list$eps.year + 0.05,
N = inits_list$countmax),
list(a1 = inits_list$a1 - 0.05,
mu.a0 = inits_list$mu.a0 - 0.05,
mu.b0species = inits_list$mu.b0species - 0.05,
a0 = inits_list$a0 - 0.05,
b0.species = inits_list$b0.species - 0.05,
eps.site = inits_list$eps.site - 0.05,
eps.year = inits_list$eps.year - 0.05,
N = inits_list$countmax))
model <- jagsUI::jags(data = data_list,
inits = inits,
parameters.to.save = parameters,
model.file = model_file,
parallel = TRUE,
n.chains = 3,
n.iter = 4000,
DIC = TRUE)
gelman.diag(model$samples, multivariate = F)
model <- jagsUI::jags(data = data_list,
inits = inits,
parameters.to.save = parameters,
model.file = model_file,
parallel = TRUE,
n.chains = 3,
n.burnin = 2000,
n.iter = 10000,
n.thin = 2,
DIC = TRUE)
gelman.diag(model$samples, multivariate = F)
knitr::opts_chunk$set(echo = TRUE)
install.packages('googledrive')
library(googledrive)
library(dplyr)
library(tidyr)
getwd()
