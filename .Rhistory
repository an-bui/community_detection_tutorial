#select only the variables of interest
dplyr::select(transect, year, Mean, SD)
saveRDS(stats, here("MSAM", "data", "model_outputs", "MSAM_bray_summary.RDS"))
str(stats)
?summary
package.list <- c("tidyverse", 'here', #general packages
'jagsUI') #jags wrapper
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in% installed.packages()[,"Package"])]
## And loading them
for(i in package.list){library(i, character.only = T)}
model <- readRDS(here("MSAM",
'data',
'model_outputs',
'MSAM_model_output.RDS'))
#now the parameter we want is just bray, none of the others
params2 <- c("bray")
#run this model so we have ~4000 samples to calculate mean and SD
model2 <- update(model,
parameters.to.save = params2,
n.iter = 1335,
parallel = TRUE)
#get a summary of this model and the parameters we saved (bray)
sum <- summary(model2$samples)
#pull out mean and SD values from that summary
stats <- as.data.frame(sum$statistics) %>%
rownames_to_column(var = 'parm') %>%
filter(parm != "deviance") %>%
#re-connect these values with their transect and year IDs
separate(parm,
into = c("transect", "year"),
sep = ",") %>%
mutate(transect = str_sub(transect, 6, (nchar(transect))),
year = str_sub(year, 1, (nchar(year)-1))) %>%
mutate(transect = as.numeric(transect),
year = as.numeric(year)) %>%
#select only the variables of interest
dplyr::select(transect, year, Mean, SD)
ggplot(stats) +
geom_ribbon(aes(x = year, ymin = Mean-SD, ymax = Mean+SD))
ggplot(stats) +
geom_ribbon(aes(x = year, ymin = Mean-SD, ymax = Mean+SD)) +
facet_grid(~transect)
ggplot(stats) +
geom_ribbon(aes(x = year, ymin = Mean-SD, ymax = Mean+SD)) +
facet_grid(~transect) +
theme_bw() +
theme(strip.background = element_blank())
ggplot(stats) +
geom_ribbon(aes(x = year, ymin = Mean-SD, ymax = Mean+SD)) +
facet_grid(~transect) +
theme_bw() +
theme(strip.background = element_rect(color = "white"))
theme(strip.background = element_rect(fill = "white"))
ggplot(stats) +
geom_ribbon(aes(x = year, ymin = Mean-SD, ymax = Mean+SD)) +
facet_grid(~transect) +
theme_bw() +
theme(strip.background = element_rect(fill = "white"))
labels <- c("Transect 1", "Transect 2", "Transect 3")
names(labels) <- c(1, 2, 3)
ggplot(stats) +
geom_ribbon(aes(x = year, ymin = Mean-SD, ymax = Mean+SD)) +
facet_grid(~transect, labeller = labels) +
theme_bw() +
theme(strip.background = element_rect(fill = "white"))
labels <- c("Transect 1", "Transect 2", "Transect 3")
names(labels) <- c(1, 2, 3)
ggplot(stats) +
geom_ribbon(aes(x = year, ymin = Mean-SD, ymax = Mean+SD)) +
facet_grid(~transect, labeller = labels) +
theme_bw() +
theme(strip.background = element_rect(fill = "white"))
labels <- c("Transect 1", "Transect 2", "Transect 3")
names(labels) <- c('1', '2', '3')
ggplot(stats) +
geom_ribbon(aes(x = year, ymin = Mean-SD, ymax = Mean+SD)) +
facet_grid(~transect, labeller = labels) +
theme_bw() +
theme(strip.background = element_rect(fill = "white"))
ggplot(stats) +
geom_ribbon(aes(x = year, ymin = Mean-SD, ymax = Mean+SD)) +
facet_grid(~transect, labeller = labeller(transect = labels)) +
theme_bw() +
theme(strip.background = element_rect(fill = "white"))
ggplot(stats) +
geom_ribbon(aes(x = year, ymin = Mean-SD, ymax = Mean+SD), alpha = 0.6) +
facet_grid(~transect, labeller = labeller(transect = labels)) +
theme_bw() +
theme(strip.background = element_rect(fill = "white"))
ggplot(stats) +
geom_ribbon(aes(x = year, ymin = Mean-SD, ymax = Mean+SD), alpha = 0.6) +
geom_line(aes(x = year, y = Mean)) +
facet_grid(~transect, labeller = labeller(transect = labels)) +
theme_bw() +
theme(strip.background = element_rect(fill = "white"))
ggplot(stats) +
geom_ribbon(aes(x = year, ymin = Mean-SD, ymax = Mean+SD), alpha = 0.6) +
geom_line(aes(x = year, y = Mean)) +
facet_grid(~transect, labeller = labeller(transect = labels)) +
theme_bw() +
theme(strip.background = element_rect(fill = "white")) +
labs(x = "Year", y = "Bray-Curtis dissimilarity \n (Posterior mean and SD)")
package.list <- c("here", "tidyverse",
"data.table")
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
for(i in package.list){library(i, character.only = T)}
all_data <- read.csv(here("SAM",
'data',
"tidy_data",
"SBC_fish_stability_metrics_with_covariates.csv"))
package.list <- c("here", "tidyverse",
"data.table")
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
for(i in package.list){library(i, character.only = T)}
all_data <- read.csv(here("SAM",
'data',
"tidy_data",
"SBC_fish_stability_metrics_with_covariates.csv"))
#indexing for model main likelihood loop
n.data <- nrow(all_data)
#indexing for site-level intercept random effects
n.sites <- length(unique(all_data$SITE))
#number of plant lags
n.plantlag <- all_data %>%
dplyr::select(DRY_GM2:DRY_GM2_l5) %>%
ncol()
#number of temperatuere lags
n.templag <- all_data %>%
dplyr::select(TEMP_C:TEMP_C_l10) %>%
ncol()
#get d and the known variance
d <- as.vector(all_data$bray)
var.estimate <- as.vector(all_data$SD^2)
#get these site IDs
Site.ID <- all_data %>%
mutate(SITE = as.numeric(as.factor(SITE))) %>%
dplyr::select(SITE) %>%
as_vector()
#plant covariate data (needs to be a matrix of sites x lags)
Plant <- all_data %>%
dplyr::select(SITE_TRANS, YEAR, DRY_GM2:DRY_GM2_l5) %>%
pivot_longer(DRY_GM2:DRY_GM2_l5,
names_to = 'lag',
values_to = 'kelp') %>%
mutate(kelp = scale(kelp)) %>%
pivot_wider(names_from = 'lag',
values_from = "kelp") %>%
dplyr::select(DRY_GM2:DRY_GM2_l5) %>%
as.matrix()
#temperature covariate data (needs to be a matrix of sites x lags)
Temp <- all_data %>%
dplyr::select(SITE_TRANS, YEAR, TEMP_C:TEMP_C_l10) %>%
pivot_longer(TEMP_C:TEMP_C_l10,
names_to = 'lag',
values_to = 'temp') %>%
mutate(temp = scale(temp)) %>%
pivot_wider(names_from = 'lag',
values_from = "temp") %>%
dplyr::select(TEMP_C:TEMP_C_l10) %>%
as.matrix()
data <- list(n.data = n.data,
n.sites = n.sites,
Site.ID = Site.ID,
d = d,
var.estimate = var.estimate,
n.plantlag = n.plantlag,
Plant = Plant,
n.templag = n.templag,
Temp = Temp)
saveRDS(data, here('SAM',
'data',
"model_inputs",
"SAM_input_data.RDS"))
data_list <- readRDS(here('SAM',
'data',
"model_inputs",
"SAM_input_data.RDS"))
str(data_list)
# Load packages, here and tidyverse for coding ease,
package.list <- c("here", "tidyverse", #general packages for data input/manipulation
"jagsUI", #to run JAGS models
'mcmcplots', #to look at trace plots
"coda") #to evaluate convergence
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## And loading them
for(i in package.list){library(i, character.only = T)}
data_list <- readRDS(here('SAM',
'data',
"model_inputs",
"SAM_input_data.RDS"))
# Load packages, here and tidyverse for coding ease,
package.list <- c("here", "tidyverse", #general packages for data input/manipulation
"jagsUI", #to run JAGS models
'mcmcplots', #to look at trace plots
"coda") #to evaluate convergence
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## And loading them
for(i in package.list){library(i, character.only = T)}
data_list <- readRDS(here('SAM',
'data',
"model_inputs",
"SAM_input_data.RDS"))
model <- here('SAM',
'code',
'SAM_model.R')
#these parameters we can track to assess convergence
params <- c('b0.site', #site-level intercepts
'b0', #overall intercept
'b', #covariate effects
'wA', #plant biomass weights vector
'wB', #temperature weights
'sig.site', #sd of site effects
'var.process', #unknown variance
'cumm.plantwt', #cumulative plant weights
'cumm.tempwt') #cumulative temperature weights
mod <- jagsUI::jags(data = data_list,
inits = NULL,
model.file = model,
parameters.to.save = params,
parallel = TRUE,
n.chains = 3,
n.burnin =1500,
n.iter = 5000,
DIC = TRUE)
mod <- jagsUI::jags(data = data_list,
inits = NULL,
model.file = model,
parameters.to.save = params,
parallel = TRUE,
n.chains = 3,
n.burnin =1500,
n.iter = 5000,
DIC = TRUE)
mod <- jagsUI::jags(data = data_list,
inits = NULL,
model.file = model,
parameters.to.save = params,
parallel = TRUE,
n.chains = 3,
#n.burnin =1500,
#n.iter = 5000,
n.iter = 1,
DIC = TRUE)
mod <- jagsUI::jags(data = data_list,
inits = NULL,
model.file = model,
parameters.to.save = params,
parallel = TRUE,
n.chains = 3,
n.iter = 4000,
DIC = TRUE)
mod <- jagsUI::jags(data = data_list,
inits = NULL,
model.file = model,
parameters.to.save = params,
parallel = TRUE,
n.chains = 3,
n.burnin = 1500,
n.iter = 5000,
DIC = TRUE)
params <- c('b0', #overall intercept
'b', #covariate effects
'wA', #plant biomass weights vector
'wB', #temperature weights
'sig.site', #sd of site effects
'var.process', #unknown variance
'cumm.plantwt', #cumulative plant weights
'cumm.tempwt') #cumulative temperature weights
mod <- jagsUI::jags(data = data_list,
inits = NULL,
model.file = model,
parameters.to.save = params,
parallel = TRUE,
n.chains = 3,
n.burnin = 1500,
n.iter = 5000,
DIC = TRUE)
#these parameters we can track to assess convergence
params <- c('b0.site', #site-level intercepts
'b0', #overall intercept
'b', #covariate effects
'wA', #plant biomass weights vector
'wB', #temperature weights
'sig.site', #sd of site effects
'var.process') #unknown variance
mod <- jagsUI::jags(data = data_list,
inits = NULL,
model.file = model,
parameters.to.save = params,
parallel = TRUE,
n.chains = 3,
n.burnin =1500,
n.iter = 5000,
DIC = TRUE)
#
gelman.diag(mod$samples, multivariate = F)
sum <- summary(mod$samples)
#
saveRDS(sum, here('SAM',
'data',
'model_outputs',
'SAM_model_summary.RDS'))
#pull median and 95% BCI out of the summary file:
betas <- as.data.frame(sum$quantiles) %>%
#get parameter names to be a column
rownames_to_column(var = "parm") %>%
#select only the covariate effect betas
filter(str_detect(parm, "b")) %>%
filter(!str_detect(parm, "b0"))
#plot these median and 95% BCI values
ggplot(betas, aes(x = `50%`, y = parm)) +
geom_vline(xintercept = 0, linetype = 2, alpha = 0.4) +
geom_pointrange(aes(x = `50%`,
y = parm,
xmin = `2.5%`,
xmax = `97.5%`),
size = 0.4) +
scale_y_discrete(labels = c("Kelp biomass", "Temperature")) +
labs(x = "Covariate effect \n (Median and 95% BCI)")
#plot these median and 95% BCI values
ggplot(betas, aes(x = `50%`, y = parm)) +
geom_vline(xintercept = 0, linetype = 2, alpha = 0.4) +
geom_pointrange(aes(x = `50%`,
y = parm,
xmin = `2.5%`,
xmax = `97.5%`),
size = 0.4) +
scale_y_discrete(labels = c("Kelp biomass", "Temperature")) +
labs(x = "Covariate effect \n (Median and 95% BCI)") +
theme_bw()
#plot these median and 95% BCI values
ggplot(betas, aes(x = `50%`, y = parm)) +
geom_vline(xintercept = 0, linetype = 2, alpha = 0.4) +
geom_pointrange(aes(x = `50%`,
y = parm,
xmin = `2.5%`,
xmax = `97.5%`),
size = 0.4) +
scale_y_discrete(labels = c("Kelp biomass", "Temperature")) +
labs(x = "Covariate effect \n (Median and 95% BCI)",
y = "") +
theme_bw()
This figure suggests that there is a clear effect of temperature, but not plant biomass, on community change. Higher temperatures lead to higher community change. We can then look at which seasons drive this temperature effect:
```{r}
#pull the median and 95% BCI weights for temperature out of the model summary file
fish_tweights <- as.data.frame(sum$quantiles) %>%
rownames_to_column(var = "parm") %>%
filter(str_detect(parm, "wB")) %>%
#indicate which type of season they're in
mutate(season = case_when(parm %in% c("wB[1]", "wB[3]", "wB[5]",
'wB[7]', 'wB[9]','wB[11]') ~ "Warm",
parm %in% c("wB[2]", "wB[4]", 'wB[6]',
'wB[8]', 'wB[10]') ~ "Cold")) %>%
#get the years into the past for each of these seasons
mutate(year = case_when(parm == "wB[1]" ~ 0,
parm %in% c("wB[2]", 'wB[3]') ~ 1,
parm %in% c('wB[4]', 'wB[5]') ~ 2,
parm %in% c("wB[6]", 'wB[7]') ~ 3,
parm %in% c("wB[8]", 'wB[9]') ~ 4,
parm %in% c("wB[10]", 'wB[11]') ~ 5,
TRUE ~ NA_real_)) %>%
#determine whether the weight is clearly non-zero or not
mutate(above = case_when(
`50%` > 1/11 ~ "yes",
TRUE ~ "no"
)) %>%
complete(season, year) %>%
unite("color", season, above, sep = "-", remove = FALSE)
#indicate colors for seasons when they do and do not have clear weight effects
warmcol <- '#d8b365'
coldcol <- '#5ab4ac'
warmalpha <- '#f0e1c4'
coldalpha <- '#c2e1df'
#plot these median and 95% BCI values.
fish_tweights %>%
ggplot(aes(x = year, y = `50%`, color = color, shape = color)) +
geom_hline(yintercept = 1/11, linetype = 2, linewidth = 0.1) +
geom_pointrange(aes(ymin = `2.5%`, ymax = `97.5%`),
position = position_dodge(width = 0.5), size = 0.4) +
scale_x_continuous(breaks = c(0, 1, 2, 3, 4, 5)) +
scale_color_manual(values = c("Warm-yes" = warmcol, "Cold-yes" = coldcol,
"Warm-no" = warmalpha, "Cold-no" = coldalpha),
breaks = c("Warm-yes", "Cold-yes"),
labels = c("Warm-yes" = "Warm", "Cold-yes" = "Cold")) +
scale_shape_manual(values = c("Warm-yes" = 17, "Cold-yes" = 16,
"Warm-no" = 17, "Cold-no" = 16),
breaks = c("Warm-yes", "Cold-yes"),
labels = c("Warm-yes" = "Warm", "Cold-yes" = "Cold")) +
labs(x = "Years into the past",
y = "Importance weight",
shape = "", color = "") +
theme(legend.position = c(0.92, 1.1))
#plot these median and 95% BCI values.
fish_tweights %>%
ggplot(aes(x = year, y = `50%`, color = color, shape = color)) +
geom_hline(yintercept = 1/11, linetype = 2, linewidth = 0.1) +
geom_pointrange(aes(ymin = `2.5%`, ymax = `97.5%`),
position = position_dodge(width = 0.5), size = 0.4) +
scale_x_continuous(breaks = c(0, 1, 2, 3, 4, 5)) +
scale_color_manual(values = c("Warm-yes" = warmcol, "Cold-yes" = coldcol,
"Warm-no" = warmalpha, "Cold-no" = coldalpha),
breaks = c("Warm-yes", "Cold-yes"),
labels = c("Warm-yes" = "Warm", "Cold-yes" = "Cold")) +
scale_shape_manual(values = c("Warm-yes" = 17, "Cold-yes" = 16,
"Warm-no" = 17, "Cold-no" = 16),
breaks = c("Warm-yes", "Cold-yes"),
labels = c("Warm-yes" = "Warm", "Cold-yes" = "Cold")) +
labs(x = "Years into the past",
y = "Importance weight",
shape = "", color = "") +
theme(legend.position = c(0.92, 1.1)) +
theme_bw()
#plot these median and 95% BCI values.
fish_tweights %>%
ggplot(aes(x = year, y = `50%`, color = color, shape = color)) +
geom_hline(yintercept = 1/11, linetype = 2, linewidth = 0.1) +
geom_pointrange(aes(ymin = `2.5%`, ymax = `97.5%`),
position = position_dodge(width = 0.5), size = 0.4) +
scale_x_continuous(breaks = c(0, 1, 2, 3, 4, 5)) +
scale_color_manual(values = c("Warm-yes" = warmcol, "Cold-yes" = coldcol,
"Warm-no" = warmalpha, "Cold-no" = coldalpha),
breaks = c("Warm-yes", "Cold-yes"),
labels = c("Warm-yes" = "Warm", "Cold-yes" = "Cold")) +
scale_shape_manual(values = c("Warm-yes" = 17, "Cold-yes" = 16,
"Warm-no" = 17, "Cold-no" = 16),
breaks = c("Warm-yes", "Cold-yes"),
labels = c("Warm-yes" = "Warm", "Cold-yes" = "Cold")) +
labs(x = "Years into the past",
y = "Importance weight \n (Median and 95% BCI)",
shape = "", color = "") +
theme(legend.position = c(0.92, 1.1)) +
theme_bw()
#pull the median and 95% BCI weights for temperature out of the model summary file
fish_tweights <- as.data.frame(sum$quantiles) %>%
rownames_to_column(var = "parm") %>%
filter(str_detect(parm, "wB")) %>%
#indicate which type of season they're in
mutate(season = case_when(parm %in% c("wB[1]", "wB[3]", "wB[5]",
'wB[7]', 'wB[9]','wB[11]') ~ "Warm",
parm %in% c("wB[2]", "wB[4]", 'wB[6]',
'wB[8]', 'wB[10]') ~ "Cold")) %>%
#get the years into the past for each of these seasons
mutate(year = case_when(parm == "wB[1]" ~ 0,
parm %in% c("wB[2]", 'wB[3]') ~ 1,
parm %in% c('wB[4]', 'wB[5]') ~ 2,
parm %in% c("wB[6]", 'wB[7]') ~ 3,
parm %in% c("wB[8]", 'wB[9]') ~ 4,
parm %in% c("wB[10]", 'wB[11]') ~ 5,
TRUE ~ NA_real_)) %>%
complete(season, year)
#plot these median and 95% BCI values.
fish_tweights %>%
ggplot(aes(x = year, y = `50%`, color = season, shape = season)) +
geom_hline(yintercept = 1/11, linetype = 2, linewidth = 0.1) +
geom_pointrange(aes(ymin = `2.5%`, ymax = `97.5%`),
position = position_dodge(width = 0.5), size = 0.4) +
scale_x_continuous(breaks = c(0, 1, 2, 3, 4, 5)) +
scale_color_manual(values = c("Warm" = warmcol, "Cold" = coldcol),
breaks = c("Warm", "Cold")) +
scale_shape_manual(values = c("Warm" = 17, "Cold" = 16),
breaks = c("Warm", "Cold")) +
labs(x = "Years into the past",
y = "Importance weight \n (Median and 95% BCI)",
shape = "", color = "") +
theme(legend.position = c(0.92, 1.1)) +
theme_bw()
#pull the median and 95% BCI weights for temperature out of the model summary file
fish_tweights <- as.data.frame(sum$quantiles) %>%
rownames_to_column(var = "parm") %>%
filter(str_detect(parm, "wB")) %>%
#indicate which type of season they're in
mutate(season = case_when(parm %in% c("wB[1]", "wB[3]", "wB[5]",
'wB[7]', 'wB[9]','wB[11]') ~ "Warm",
parm %in% c("wB[2]", "wB[4]", 'wB[6]',
'wB[8]', 'wB[10]') ~ "Cold")) %>%
#get the years into the past for each of these seasons
mutate(year = case_when(parm == "wB[1]" ~ 0,
parm %in% c("wB[2]", 'wB[3]') ~ 1,
parm %in% c('wB[4]', 'wB[5]') ~ 2,
parm %in% c("wB[6]", 'wB[7]') ~ 3,
parm %in% c("wB[8]", 'wB[9]') ~ 4,
parm %in% c("wB[10]", 'wB[11]') ~ 5,
TRUE ~ NA_real_)) %>%
complete(season, year)
coldcol <- '#5ab4ac'
#plot these median and 95% BCI values.
fish_tweights %>%
ggplot(aes(x = year, y = `50%`, color = season, shape = season)) +
geom_hline(yintercept = 1/11, linetype = 2, linewidth = 0.1) +
geom_pointrange(aes(ymin = `2.5%`, ymax = `97.5%`),
position = position_dodge(width = 0.5), size = 0.4) +
scale_x_continuous(breaks = c(0, 1, 2, 3, 4, 5)) +
scale_color_manual(values = c("Warm" = warmcol, "Cold" = coldcol),
breaks = c("Warm", "Cold")) +
scale_shape_manual(values = c("Warm" = 17, "Cold" = 16),
breaks = c("Warm", "Cold")) +
labs(x = "Years into the past",
y = "Importance weight \n (Median and 95% BCI)",
shape = "", color = "") +
theme(legend.position = c(0.92, 1.1)) +
theme_bw()
