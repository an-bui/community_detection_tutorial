#determine whether the weight is clearly non-zero or not
mutate(above = case_when(
`50%` > 1/11 ~ "yes",
TRUE ~ "no"
)) %>%
complete(season, year) %>%
unite("color", season, above, sep = "-", remove = FALSE)
#indicate colors for seasons when they do and do not have clear weight effects
warmcol <- '#d8b365'
coldcol <- '#5ab4ac'
warmalpha <- '#f0e1c4'
coldalpha <- '#c2e1df'
#plot these median and 95% BCI values.
fish_tweights %>%
ggplot(aes(x = year, y = `50%`, color = color, shape = color)) +
geom_hline(yintercept = 1/11, linetype = 2, linewidth = 0.1) +
geom_pointrange(aes(ymin = `2.5%`, ymax = `97.5%`),
position = position_dodge(width = 0.5), size = 0.4) +
scale_x_continuous(breaks = c(0, 1, 2, 3, 4, 5)) +
scale_color_manual(values = c("Warm-yes" = warmcol, "Cold-yes" = coldcol,
"Warm-no" = warmalpha, "Cold-no" = coldalpha),
breaks = c("Warm-yes", "Cold-yes"),
labels = c("Warm-yes" = "Warm", "Cold-yes" = "Cold")) +
scale_shape_manual(values = c("Warm-yes" = 17, "Cold-yes" = 16,
"Warm-no" = 17, "Cold-no" = 16),
breaks = c("Warm-yes", "Cold-yes"),
labels = c("Warm-yes" = "Warm", "Cold-yes" = "Cold")) +
labs(x = "Years into the past",
y = "Importance weight",
shape = "", color = "") +
theme(legend.position = c(0.92, 1.1))
#plot these median and 95% BCI values.
fish_tweights %>%
ggplot(aes(x = year, y = `50%`, color = color, shape = color)) +
geom_hline(yintercept = 1/11, linetype = 2, linewidth = 0.1) +
geom_pointrange(aes(ymin = `2.5%`, ymax = `97.5%`),
position = position_dodge(width = 0.5), size = 0.4) +
scale_x_continuous(breaks = c(0, 1, 2, 3, 4, 5)) +
scale_color_manual(values = c("Warm-yes" = warmcol, "Cold-yes" = coldcol,
"Warm-no" = warmalpha, "Cold-no" = coldalpha),
breaks = c("Warm-yes", "Cold-yes"),
labels = c("Warm-yes" = "Warm", "Cold-yes" = "Cold")) +
scale_shape_manual(values = c("Warm-yes" = 17, "Cold-yes" = 16,
"Warm-no" = 17, "Cold-no" = 16),
breaks = c("Warm-yes", "Cold-yes"),
labels = c("Warm-yes" = "Warm", "Cold-yes" = "Cold")) +
labs(x = "Years into the past",
y = "Importance weight",
shape = "", color = "") +
theme(legend.position = c(0.92, 1.1)) +
theme_bw()
#plot these median and 95% BCI values.
fish_tweights %>%
ggplot(aes(x = year, y = `50%`, color = color, shape = color)) +
geom_hline(yintercept = 1/11, linetype = 2, linewidth = 0.1) +
geom_pointrange(aes(ymin = `2.5%`, ymax = `97.5%`),
position = position_dodge(width = 0.5), size = 0.4) +
scale_x_continuous(breaks = c(0, 1, 2, 3, 4, 5)) +
scale_color_manual(values = c("Warm-yes" = warmcol, "Cold-yes" = coldcol,
"Warm-no" = warmalpha, "Cold-no" = coldalpha),
breaks = c("Warm-yes", "Cold-yes"),
labels = c("Warm-yes" = "Warm", "Cold-yes" = "Cold")) +
scale_shape_manual(values = c("Warm-yes" = 17, "Cold-yes" = 16,
"Warm-no" = 17, "Cold-no" = 16),
breaks = c("Warm-yes", "Cold-yes"),
labels = c("Warm-yes" = "Warm", "Cold-yes" = "Cold")) +
labs(x = "Years into the past",
y = "Importance weight \n (Median and 95% BCI)",
shape = "", color = "") +
theme(legend.position = c(0.92, 1.1)) +
theme_bw()
#pull the median and 95% BCI weights for temperature out of the model summary file
fish_tweights <- as.data.frame(sum$quantiles) %>%
rownames_to_column(var = "parm") %>%
filter(str_detect(parm, "wB")) %>%
#indicate which type of season they're in
mutate(season = case_when(parm %in% c("wB[1]", "wB[3]", "wB[5]",
'wB[7]', 'wB[9]','wB[11]') ~ "Warm",
parm %in% c("wB[2]", "wB[4]", 'wB[6]',
'wB[8]', 'wB[10]') ~ "Cold")) %>%
#get the years into the past for each of these seasons
mutate(year = case_when(parm == "wB[1]" ~ 0,
parm %in% c("wB[2]", 'wB[3]') ~ 1,
parm %in% c('wB[4]', 'wB[5]') ~ 2,
parm %in% c("wB[6]", 'wB[7]') ~ 3,
parm %in% c("wB[8]", 'wB[9]') ~ 4,
parm %in% c("wB[10]", 'wB[11]') ~ 5,
TRUE ~ NA_real_)) %>%
complete(season, year)
#plot these median and 95% BCI values.
fish_tweights %>%
ggplot(aes(x = year, y = `50%`, color = season, shape = season)) +
geom_hline(yintercept = 1/11, linetype = 2, linewidth = 0.1) +
geom_pointrange(aes(ymin = `2.5%`, ymax = `97.5%`),
position = position_dodge(width = 0.5), size = 0.4) +
scale_x_continuous(breaks = c(0, 1, 2, 3, 4, 5)) +
scale_color_manual(values = c("Warm" = warmcol, "Cold" = coldcol),
breaks = c("Warm", "Cold")) +
scale_shape_manual(values = c("Warm" = 17, "Cold" = 16),
breaks = c("Warm", "Cold")) +
labs(x = "Years into the past",
y = "Importance weight \n (Median and 95% BCI)",
shape = "", color = "") +
theme(legend.position = c(0.92, 1.1)) +
theme_bw()
#pull the median and 95% BCI weights for temperature out of the model summary file
fish_tweights <- as.data.frame(sum$quantiles) %>%
rownames_to_column(var = "parm") %>%
filter(str_detect(parm, "wB")) %>%
#indicate which type of season they're in
mutate(season = case_when(parm %in% c("wB[1]", "wB[3]", "wB[5]",
'wB[7]', 'wB[9]','wB[11]') ~ "Warm",
parm %in% c("wB[2]", "wB[4]", 'wB[6]',
'wB[8]', 'wB[10]') ~ "Cold")) %>%
#get the years into the past for each of these seasons
mutate(year = case_when(parm == "wB[1]" ~ 0,
parm %in% c("wB[2]", 'wB[3]') ~ 1,
parm %in% c('wB[4]', 'wB[5]') ~ 2,
parm %in% c("wB[6]", 'wB[7]') ~ 3,
parm %in% c("wB[8]", 'wB[9]') ~ 4,
parm %in% c("wB[10]", 'wB[11]') ~ 5,
TRUE ~ NA_real_)) %>%
complete(season, year)
coldcol <- '#5ab4ac'
#plot these median and 95% BCI values.
fish_tweights %>%
ggplot(aes(x = year, y = `50%`, color = season, shape = season)) +
geom_hline(yintercept = 1/11, linetype = 2, linewidth = 0.1) +
geom_pointrange(aes(ymin = `2.5%`, ymax = `97.5%`),
position = position_dodge(width = 0.5), size = 0.4) +
scale_x_continuous(breaks = c(0, 1, 2, 3, 4, 5)) +
scale_color_manual(values = c("Warm" = warmcol, "Cold" = coldcol),
breaks = c("Warm", "Cold")) +
scale_shape_manual(values = c("Warm" = 17, "Cold" = 16),
breaks = c("Warm", "Cold")) +
labs(x = "Years into the past",
y = "Importance weight \n (Median and 95% BCI)",
shape = "", color = "") +
theme(legend.position = c(0.92, 1.1)) +
theme_bw()
2019-1992
package.list <- c("tidyverse", 'here')
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in% installed.packages()[,"Package"])]
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## And loading them
for(i in package.list){library(i, character.only = T)}
data_list <- readRDS(here('tutorials',
'03_beta_regression',
'data',
"model_inputs",
"grasshopper_betareg_input_data_list.RDS"))
str(data_list)
# Load packages, here and tidyverse for coding ease,
package.list <- c("here", "tidyverse", #general packages for data input/manipulation
"jagsUI", #to run JAGS models
'mcmcplots', #to look at trace plots
"coda") #to evaluate convergence
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## And loading them
for(i in package.list){library(i, character.only = T)}
data_list <- readRDS(here('tutorials',
'03_beta_regression',
'data',
"model_inputs",
"grasshopper_betareg_input_data_list.RDS"))
model <- here('tutorials',
'03_beta_regression',
'code',
'grasshopper_betareg_model.R')
#these parameters we can track to assess convergence
params <- c('b0.web', #site-level intercepts
'b0', #overall intercept
'b', #covariate effects
'wA', #plant biomass weights vector
'wB', #temperature weights
'sig.site', #sd of site effects
'var.process') #unknown variance
mod <- jagsUI::jags(data = data_list,
inits = NULL,
model.file = model,
parameters.to.save = params,
parallel = TRUE,
n.chains = 3,
#n.burnin =1500,
n.iter = 1,
#n.iter = 5000,
DIC = TRUE)
# Check convergence -------------------------------------------------------
#
mcmcplot(mod$samples)
#
gelman.diag(mod$samples, multivariate = F)
sum <- summary(mod$samples)
mod <- jagsUI::jags(data = data_list,
inits = NULL,
model.file = model,
parameters.to.save = params,
parallel = TRUE,
n.chains = 3,
n.iter = 350,
DIC = TRUE)
# Check convergence -------------------------------------------------------
#
mcmcplot(mod$samples)
#
gelman.diag(mod$samples, multivariate = F)
sum <- summary(mod$samples)
sum <- readRDS(here('tutorials',
'03_beta_regression',
'data',
'model_outputs',
'grasshopper_betareg_summary.RDS'))
#pull median and 95% BCI out of the summary file:
betas <- as.data.frame(sum$quantiles) %>%
#get parameter names to be a column
rownames_to_column(var = "parm") %>%
#select only the covariate effect betas
filter(str_detect(parm, "b")) %>%
filter(!str_detect(parm, "b0"))
#plot these median and 95% BCI values
ggplot(betas, aes(x = `50%`, y = parm)) +
geom_vline(xintercept = 0, linetype = 2, alpha = 0.4) +
geom_pointrange(aes(x = `50%`,
y = parm,
xmin = `2.5%`,
xmax = `97.5%`),
size = 0.4) +
scale_y_discrete(labels = c("Temperature", "Precipitation",
'Plant biomass')) +
labs(x = "Covariate effect \n (Median and 95% BCI)",
y = "") +
theme_bw()
View(betas)
#pull median and 95% BCI out of the summary file:
betas <- as.data.frame(sum$quantiles) %>%
#get parameter names to be a column
rownames_to_column(var = "parm") %>%
#select only the covariate effect betas
filter(str_detect(parm, "b")) %>%
filter(!str_detect(parm, "b0")) %>%
filter(!str_detect(parm, "web"))
#plot these median and 95% BCI values
ggplot(betas, aes(x = `50%`, y = parm)) +
geom_vline(xintercept = 0, linetype = 2, alpha = 0.4) +
geom_pointrange(aes(x = `50%`,
y = parm,
xmin = `2.5%`,
xmax = `97.5%`),
size = 0.4) +
scale_y_discrete(labels = c("Temperature", "Precipitation",
'Plant biomass')) +
labs(x = "Covariate effect \n (Median and 95% BCI)",
y = "") +
theme_bw()
#pull the median and 95% BCI weights for temperature out of the model summary file
hopper_weights <- as.data.frame(sum$quantiles) %>%
rownames_to_column(var = "parm") %>%
filter(str_detect(parm, "w"))# %>%
View(hopper_weights)
#pull the median and 95% BCI weights for temperature out of the model summary file
hopper_weights <- as.data.frame(sum$quantiles) %>%
rownames_to_column(var = "parm") %>%
filter(str_detect(parm, "w")) %>%
filter(!str_detect(parm, "web"))
#pull the median and 95% BCI weights for temperature out of the model summary file
hop_weights <- as.data.frame(sum$quantiles) %>%
rownames_to_column(var = "par") %>%
filter(str_detect(par, "w")) %>%
filter(!str_detect(par, "cumm")) %>%
filter(!str_detect(par, "b0.web")) %>%
filter(!str_detect(par, "sig.web")) %>%
mutate(lag = str_sub(par, 4, (nchar(par)-1))) %>%
mutate(covariate = case_when(str_detect(par, "wA") ~ "Temperature",
str_detect(par, "wB") ~ "Precipitation",
str_detect(par, "wC") ~ "Plant biomass")) %>%
dplyr::select(lag, covariate, `2.5%`, `50%`, `97.5%`)
#pull the median and 95% BCI weights for temperature out of the model summary file
hopper_weights <- as.data.frame(sum$quantiles) %>%
rownames_to_column(var = "par") %>%
filter(str_detect(par, "w")) %>%
filter(!str_detect(par, "cumm")) %>%
filter(!str_detect(par, "b0.web")) %>%
filter(!str_detect(par, "sig.web")) %>%
mutate(lag = str_sub(par, 4, (nchar(par)-1))) %>%
mutate(covariate = case_when(str_detect(par, "wA") ~ "Temperature",
str_detect(par, "wB") ~ "Precipitation",
str_detect(par, "wC") ~ "Plant biomass")) %>%
dplyr::select(lag, covariate, `2.5%`, `50%`, `97.5%`)
(hop_weight_plot1 <- hop_ws %>%
filter(covariate == "Plant biomass") %>%
mutate(lag = factor(lag, levels = c("1", "2",
"3", "4", "5",
"6", "7", "8",
"9", "10",
"11"))) %>%
ggplot(aes(x = lag, y = `50%`)) +
geom_hline(yintercept = 1/11, linetype = 2, alpha = 0.4) +
geom_pointrange(aes(x = lag,
y = `50%`,
ymin = `2.5%`,
ymax = `97.5%`,
color = type),
position=position_dodge(width=0.5),
size = 0.4) +
facet_grid(~covariate)+
labs(x= "Seasons into past",
y = "Importance weight\n(median and 95% BCI)"))
(hop_weight_plot1 <- hopper_weights %>%
filter(covariate == "Plant biomass") %>%
mutate(lag = factor(lag, levels = c("1", "2",
"3", "4", "5",
"6", "7", "8",
"9", "10",
"11"))) %>%
ggplot(aes(x = lag, y = `50%`)) +
geom_hline(yintercept = 1/11, linetype = 2, alpha = 0.4) +
geom_pointrange(aes(x = lag,
y = `50%`,
ymin = `2.5%`,
ymax = `97.5%`,
color = type),
position=position_dodge(width=0.5),
size = 0.4) +
facet_grid(~covariate)+
labs(x= "Seasons into past",
y = "Importance weight\n(median and 95% BCI)"))
(hop_weight_plot1 <- hopper_weights %>%
filter(covariate == "Plant biomass") %>%
mutate(lag = factor(lag, levels = c("1", "2",
"3", "4", "5",
"6", "7", "8",
"9", "10",
"11"))) %>%
ggplot(aes(x = lag, y = `50%`)) +
geom_hline(yintercept = 1/11, linetype = 2, alpha = 0.4) +
geom_pointrange(aes(x = lag,
y = `50%`,
ymin = `2.5%`,
ymax = `97.5%`),
position=position_dodge(width=0.5),
size = 0.4) +
facet_grid(~covariate)+
labs(x= "Seasons into past",
y = "Importance weight\n(median and 95% BCI)"))
theme_set(theme_bw())
(hop_weight_plot1 <- hopper_weights %>%
filter(covariate == "Plant biomass") %>%
mutate(lag = factor(lag, levels = c("1", "2",
"3", "4", "5",
"6", "7", "8",
"9", "10",
"11"))) %>%
ggplot(aes(x = lag, y = `50%`)) +
geom_hline(yintercept = 1/11, linetype = 2, alpha = 0.4) +
geom_pointrange(aes(x = lag,
y = `50%`,
ymin = `2.5%`,
ymax = `97.5%`),
position=position_dodge(width=0.5),
size = 0.4) +
facet_grid(~covariate)+
labs(x= "Seasons into past",
y = "Importance weight\n(median and 95% BCI)"))
(hop_weight_plot2 <- hopper_weights %>%
filter(covariate != "Plant biomass") %>%
mutate(lag = factor(lag, levels = c("1", "2",
"3", "4", "5",
"6"))) %>%
ggplot(aes(x = lag, y = `50%`)) +
geom_hline(yintercept = 1/6, linetype = 2, alpha = 0.4) +
geom_pointrange(aes(x = lag,
y = `50%`,
ymin = `2.5%`,
ymax = `97.5%`),
position=position_dodge(width=0.5),
size = 0.4) +
facet_grid(~covariate)+
labs(x= "Seasons into past",
y = "Importance weight\n(median and 95% BCI)"))
hop_weight_plot1 +hop_weight_plot2
package.list <- c("tidyverse", 'here', 'patchwork')
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## And loading them
for(i in package.list){library(i, character.only = T)}
# Load packages, here and tidyverse for coding ease,
package.list <- c("here", "tidyverse", #general packages for data input/manipulation
"jagsUI", #to run JAGS models
'mcmcplots', #to look at trace plots
"coda",'patchwork') #to evaluate convergence
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## And loading them
for(i in package.list){library(i, character.only = T)}
data_list <- readRDS(here('tutorials',
'03_beta_regression',
'data',
"model_inputs",
"grasshopper_betareg_input_data_list.RDS"))
model <- here('tutorials',
'03_beta_regression',
'code',
'grasshopper_betareg_model.R')
#these parameters we can track to assess convergence
params <- c('b0.web', #site-level intercepts
'b0', #overall intercept
'b', #covariate effects
'wA', #plant biomass weights vector
'wB', #temperature weights
'sig.site', #sd of site effects
'var.process') #unknown variance
hop_weight_plot1 +hop_weight_plot2
hop_weight_plot1 +hop_weight_plot2 +
plot_layout(widths = c(1,2))
hop_weight_plot1 +hop_weight_plot2 +
plot_layout(widths = c(1.5,2))
package.list <- c("here", "tidyverse", 'data.table')
## Installing them if they aren't already on the computer
new.packages <- package.list[!(package.list %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## And loading them
for(i in package.list){library(i, character.only = T)}
grasshoppers <- read.csv(here('tutorials',
'03_beta_regression',
'data',
'tidy_data',
'grasshopper_betareg_tidydata.csv'))
all_data3 <- grasshoppers %>%
filter(YEAR > 1998) %>%
#make site-web ID
unite(c(site, web),
col = "site_web",
remove = F,
sep = "_") %>%
mutate(Web.ID = as.numeric(as.factor(site_web)))
n.data <- nrow(all_data3)
n.webs <- length(unique(all_data3$site_web))
n.transects <- length(unique(all_data3$site_web_trans))
n.templag <- all_data3 %>%
dplyr::select(Temp:Temp_l5) %>%
ncol()
n.pptlag <- all_data3 %>%
dplyr::select(PPT:PPT_l5) %>%
ncol()
n.npplag <- all_data3 %>%
dplyr::select(NPP:NPP_l10) %>%
ncol()
bray <- as.vector(all_data3$mean_bray)
var.estimate <- as.vector(all_data3$sd_bray^2)
Web.ID <- as.vector(all_data3$Web.ID)
Transect.ID <- as.vector(all_data3$siteID)
Temp <- all_data3  %>%
dplyr::select(site_web_trans, YEAR, Temp:Temp_l5) %>%
pivot_longer(Temp:Temp_l5,
names_to = 'lag',
values_to = 'temp') %>%
mutate(temp = scale(temp)) %>%
pivot_wider(names_from = 'lag',
values_from = "temp") %>%
dplyr::select(Temp:Temp_l5) %>%
as.matrix()
sum(is.na(Temp))/(sum(is.na(Temp)) + sum(!is.na(Temp)))
PPT <- all_data3  %>%
dplyr::select(site_web_trans, YEAR, PPT:PPT_l5) %>%
pivot_longer(PPT:PPT_l5,
names_to = 'lag',
values_to = 'ppt') %>%
mutate(ppt = scale(ppt)) %>%
pivot_wider(names_from = 'lag',
values_from = "ppt") %>%
dplyr::select(PPT:PPT_l5) %>%
as.matrix()
sum(is.na(PPT))/(sum(is.na(PPT)) + sum(!is.na(PPT)))
NPP <- all_data3 %>%
dplyr::select(site_web_trans, YEAR, NPP:NPP_l10) %>%
pivot_longer(NPP:NPP_l10,
names_to = 'lag',
values_to = 'npp') %>%
mutate(npp = scale(npp)) %>%
pivot_wider(names_from = 'lag',
values_from = "npp") %>%
dplyr::select(NPP:NPP_l10) %>%
as.matrix()
sum(is.na(NPP))/(sum(is.na(NPP)) + sum(!is.na(NPP)))
data1 <- list(n.data = n.data,
n.webs = n.webs,
n.templag = n.templag,
n.npplag = n.npplag,
n.pptlag = n.pptlag,
n.transects = n.transects,
bray = bray,
var.estimate = var.estimate,
Web.ID = Web.ID,
Transect.ID = Transect.ID,
Temp = Temp,
PPT = PPT,
NPP = NPP)
saveRDS(data1, here('tutorials',
'03_beta_regression',
'data',
'model_inputs',
'grasshopper_betareg_input_data_list.RDS'))
View(data1)
